class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        if (matrix == null || matrix.length <= 0 || matrix[0].length <= 0) {
            return 0;
        }
        
        int max = 0;
        
        int row = matrix.length;
        int col = matrix[0].length;
        int[][] dp = new int[row][col];
        
        for (int i=0; i<row; i++) {
            for (int j=0; j<col; j++) {
                max = Math.max(max, dfs(matrix, dp, row, col, i, j));
            }
        }
        return max;
    }
    private int[][] paths = {{0,1},{0,-1},{1,0},{-1,0}};
    private int dfs(int[][] matrix, int[][] dp, int row, int col, int i, int j) {
        if (dp[i][j] > 0) {
            return dp[i][j];
        }
        int max = 1;
        for (int[] path : paths) {
            int x = i + path[0];
            int y = j + path[1];
            if (x >= 0 && x <row && y >= 0 && y < col && matrix[x][y] > matrix[i][j]) {
                int len = 1 + dfs(matrix, dp, row, col, x, y);
                max = Math.max(max, len);
            }
        }
        dp[i][j] = max;
        return max;
    }
}
